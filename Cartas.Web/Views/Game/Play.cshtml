@using Cartas.Web.Domain
@model Cartas.Web.Models.PlayGameViewModel
@{
    Layout = null;
}
<html>


<head>
    <link rel="stylesheet" href="~/Content/game.css"/>
</head>
<body>

@Scripts.Render("~/bundles/jquery")
<script src="~/Scripts/jquery.signalR-2.4.1.min.js"></script>
<script src="~/signalr/hubs"></script>
<script type="text/javascript" src="~/Scripts/pixi.min.js"></script>
<script type="text/javascript" src="~/Scripts/gsap.min.js"></script>
@Scripts.Render("~/bundles/game")

<script type="text/javascript">
    var gameStarted = @Html.Raw(Model.Game.Started.ToString().ToLower());
    var isMasterUser = @Html.Raw((Model.Game.MasterPlayer.PlayerId == Model.ThisPlayer.PlayerId).ToString().ToLower());
    var playerCards = [];
    @foreach (var d in Model.ThisPlayer.Cards)
    {
        @:playerCards.push({ num: @d.Num, suit: @d.Suit });
    }

    var resourceLoader = new ResourceLoader();
    resourceLoader.init(() => init(resourceLoader.resources));
    
    function init(resources) {
        const gameHub = new GameHub('@Model.Game.GameId', '@Model.ThisPlayer.PlayerId');
        gameHub.init();

        const gameHubSender = new GameHubSender(gameHub);
        gameHubSender.init();

        const game = new Game();
        game.init();

        const board = new Board();
        board.init(game.app);

        var playerDeck = new PlayerDeck(game, playerCards, resources);
        playerDeck.init();

        const players = new Players(game, isMasterUser);
        @foreach (var player in Model.Game.ActivePlayers.Union(Model.Game.WaitingPlayers))
        {
            @:players.addPlayer('@player.PlayerId', '@Html.Raw(player.PlayerName)', '/Content/img/avatars/@player.Avatar', @player.Seat, @player.WinCount);
        }
        if (gameStarted) {
            players.setCurrentTurn(@Model.Game.SeatTurn);    
        }
        
        var allowDragAndDropPlayedCard = false;

        @if (Model.Game.GameType == GameType.Romi)
        {
            @:new Romi(game, isMasterUser, resources).init("2 tríos y una seguidilla");
            @:allowDragAndDropPlayedCard = true;
        }

        var reactionService = new ReactionService(game, resources);
        reactionService.init();

        var gameControls = new GameControls(game, isMasterUser, resources, gameHubSender);
        gameControls.init();

        var confirmVictory = new ConfirmVictory(game, board, playerDeck.width);
        confirmVictory.init();
        //confirmVictory.show("Jesús");

        var playedCard = new PlayedCard(game, players, resources, allowDragAndDropPlayedCard, playerDeck);
        playedCard.setPlayedCard(0, 13, 4);
        window.playedCard = playedCard;

        var deck = new Deck(game, resources, playerDeck);
        deck.init();



        var gameHubReceiver = new GameHubReceiver(gameHub, players);
        gameHubReceiver.init();

        gameHub.connect();
    }


    /**
         * /TESTS
         */
    //function timeout() {
    //    setTimeout(function() {
    //            var randomNumber = Math.floor(Math.random() * (10 - 1) + 1);
    //            players.setCurrentTurn(randomNumber);
    //            timeout();
    //        },
    //        4000);
    //}

    //timeout();
    /*END TESTS*/

</script>
</body>

</html>